#![doc = "Peripheral access API for ATSAMV71Q21RT microcontrollers (generated using svd2rust v0.36.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.36.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 3;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
unsafe extern "C" {
    fn SUPC();
    fn RSTC();
    fn RTC();
    fn RTT();
    fn WDT();
    fn PMC();
    fn EFC();
    fn UART0();
    fn UART1();
    fn PIOA();
    fn PIOB();
    fn PIOC();
    fn USART0();
    fn USART1();
    fn USART2();
    fn PIOD();
    fn PIOE();
    fn HSMCI();
    fn TWIHS0();
    fn TWIHS1();
    fn SPI0();
    fn SSC();
    fn TC0();
    fn TC1();
    fn TC2();
    fn TC3();
    fn TC4();
    fn TC5();
    fn AFEC0();
    fn DACC();
    fn PWM0();
    fn ICM();
    fn ACC();
    fn USBHS();
    fn MCAN0_INT0();
    fn MCAN0_INT1();
    fn MCAN1_INT0();
    fn MCAN1_INT1();
    fn GMAC();
    fn AFEC1();
    fn TWIHS2();
    fn SPI1();
    fn QSPI();
    fn UART2();
    fn UART3();
    fn UART4();
    fn TC6();
    fn TC7();
    fn TC8();
    fn TC9();
    fn TC10();
    fn TC11();
    fn MLB();
    fn AES();
    fn TRNG();
    fn XDMAC();
    fn ISI();
    fn PWM1();
    fn FPU();
    fn SDRAMC();
    fn RSWDT();
    fn CCW();
    fn CCF();
    fn GMAC_Q1();
    fn GMAC_Q2();
    fn IXC();
    fn I2SC0();
    fn I2SC1();
    fn GMAC_Q3();
    fn GMAC_Q4();
    fn GMAC_Q5();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[unsafe(link_section = ".vector_table.interrupts")]
#[unsafe(no_mangle)]
pub static __INTERRUPTS: [Vector; 74] = [
    Vector { _handler: SUPC },
    Vector { _handler: RSTC },
    Vector { _handler: RTC },
    Vector { _handler: RTT },
    Vector { _handler: WDT },
    Vector { _handler: PMC },
    Vector { _handler: EFC },
    Vector { _handler: UART0 },
    Vector { _handler: UART1 },
    Vector { _reserved: 0 },
    Vector { _handler: PIOA },
    Vector { _handler: PIOB },
    Vector { _handler: PIOC },
    Vector { _handler: USART0 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: PIOD },
    Vector { _handler: PIOE },
    Vector { _handler: HSMCI },
    Vector { _handler: TWIHS0 },
    Vector { _handler: TWIHS1 },
    Vector { _handler: SPI0 },
    Vector { _handler: SSC },
    Vector { _handler: TC0 },
    Vector { _handler: TC1 },
    Vector { _handler: TC2 },
    Vector { _handler: TC3 },
    Vector { _handler: TC4 },
    Vector { _handler: TC5 },
    Vector { _handler: AFEC0 },
    Vector { _handler: DACC },
    Vector { _handler: PWM0 },
    Vector { _handler: ICM },
    Vector { _handler: ACC },
    Vector { _handler: USBHS },
    Vector {
        _handler: MCAN0_INT0,
    },
    Vector {
        _handler: MCAN0_INT1,
    },
    Vector {
        _handler: MCAN1_INT0,
    },
    Vector {
        _handler: MCAN1_INT1,
    },
    Vector { _handler: GMAC },
    Vector { _handler: AFEC1 },
    Vector { _handler: TWIHS2 },
    Vector { _handler: SPI1 },
    Vector { _handler: QSPI },
    Vector { _handler: UART2 },
    Vector { _handler: UART3 },
    Vector { _handler: UART4 },
    Vector { _handler: TC6 },
    Vector { _handler: TC7 },
    Vector { _handler: TC8 },
    Vector { _handler: TC9 },
    Vector { _handler: TC10 },
    Vector { _handler: TC11 },
    Vector { _handler: MLB },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: AES },
    Vector { _handler: TRNG },
    Vector { _handler: XDMAC },
    Vector { _handler: ISI },
    Vector { _handler: PWM1 },
    Vector { _handler: FPU },
    Vector { _handler: SDRAMC },
    Vector { _handler: RSWDT },
    Vector { _handler: CCW },
    Vector { _handler: CCF },
    Vector { _handler: GMAC_Q1 },
    Vector { _handler: GMAC_Q2 },
    Vector { _handler: IXC },
    Vector { _handler: I2SC0 },
    Vector { _handler: I2SC1 },
    Vector { _handler: GMAC_Q3 },
    Vector { _handler: GMAC_Q4 },
    Vector { _handler: GMAC_Q5 },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - Supply Controller"]
    SUPC = 0,
    #[doc = "1 - Reset Controller"]
    RSTC = 1,
    #[doc = "2 - Real Time Clock"]
    RTC = 2,
    #[doc = "3 - Real Time Timer"]
    RTT = 3,
    #[doc = "4 - Watchdog Timer"]
    WDT = 4,
    #[doc = "5 - Power Management Controller"]
    PMC = 5,
    #[doc = "6 - Enhanced Embedded Flash Controller"]
    EFC = 6,
    #[doc = "7 - UART 0"]
    UART0 = 7,
    #[doc = "8 - UART 1"]
    UART1 = 8,
    #[doc = "10 - Parallel I/O Controller A"]
    PIOA = 10,
    #[doc = "11 - Parallel I/O Controller B"]
    PIOB = 11,
    #[doc = "12 - Parallel I/O Controller C"]
    PIOC = 12,
    #[doc = "13 - USART 0"]
    USART0 = 13,
    #[doc = "14 - USART 1"]
    USART1 = 14,
    #[doc = "15 - USART 2"]
    USART2 = 15,
    #[doc = "16 - Parallel I/O Controller D"]
    PIOD = 16,
    #[doc = "17 - Parallel I/O Controller E"]
    PIOE = 17,
    #[doc = "18 - Multimedia Card Interface"]
    HSMCI = 18,
    #[doc = "19 - Two Wire Interface 0 HS"]
    TWIHS0 = 19,
    #[doc = "20 - Two Wire Interface 1 HS"]
    TWIHS1 = 20,
    #[doc = "21 - Serial Peripheral Interface 0"]
    SPI0 = 21,
    #[doc = "22 - Synchronous Serial Controller"]
    SSC = 22,
    #[doc = "23 - Timer/Counter 0"]
    TC0 = 23,
    #[doc = "24 - Timer/Counter 1"]
    TC1 = 24,
    #[doc = "25 - Timer/Counter 2"]
    TC2 = 25,
    #[doc = "26 - Timer/Counter 3"]
    TC3 = 26,
    #[doc = "27 - Timer/Counter 4"]
    TC4 = 27,
    #[doc = "28 - Timer/Counter 5"]
    TC5 = 28,
    #[doc = "29 - Analog Front End 0"]
    AFEC0 = 29,
    #[doc = "30 - Digital To Analog Converter"]
    DACC = 30,
    #[doc = "31 - Pulse Width Modulation 0"]
    PWM0 = 31,
    #[doc = "32 - Integrity Check Monitor"]
    ICM = 32,
    #[doc = "33 - Analog Comparator"]
    ACC = 33,
    #[doc = "34 - USB Host / Device Controller"]
    USBHS = 34,
    #[doc = "35 - MCAN Controller 0 Interrupt 0"]
    MCAN0_INT0 = 35,
    #[doc = "36 - MCAN Controller 0 Interrupt 1"]
    MCAN0_INT1 = 36,
    #[doc = "37 - MCAN Controller 1 Interrupt 0"]
    MCAN1_INT0 = 37,
    #[doc = "38 - MCAN Controller 1 Interrupt 1"]
    MCAN1_INT1 = 38,
    #[doc = "39 - Ethernet MAC"]
    GMAC = 39,
    #[doc = "40 - Analog Front End 1"]
    AFEC1 = 40,
    #[doc = "41 - Two Wire Interface 2 HS"]
    TWIHS2 = 41,
    #[doc = "42 - Serial Peripheral Interface 1"]
    SPI1 = 42,
    #[doc = "43 - Quad I/O Serial Peripheral Interface"]
    QSPI = 43,
    #[doc = "44 - UART 2"]
    UART2 = 44,
    #[doc = "45 - UART 3"]
    UART3 = 45,
    #[doc = "46 - UART 4"]
    UART4 = 46,
    #[doc = "47 - Timer/Counter 6"]
    TC6 = 47,
    #[doc = "48 - Timer/Counter 7"]
    TC7 = 48,
    #[doc = "49 - Timer/Counter 8"]
    TC8 = 49,
    #[doc = "50 - Timer/Counter 9"]
    TC9 = 50,
    #[doc = "51 - Timer/Counter 10"]
    TC10 = 51,
    #[doc = "52 - Timer/Counter 11"]
    TC11 = 52,
    #[doc = "53 - MediaLB"]
    MLB = 53,
    #[doc = "56 - AES"]
    AES = 56,
    #[doc = "57 - True Random Generator"]
    TRNG = 57,
    #[doc = "58 - DMA"]
    XDMAC = 58,
    #[doc = "59 - Camera Interface"]
    ISI = 59,
    #[doc = "60 - Pulse Width Modulation 1"]
    PWM1 = 60,
    #[doc = "61 - Floating Point Unit"]
    FPU = 61,
    #[doc = "62 - SDRAM Controller"]
    SDRAMC = 62,
    #[doc = "63 - Reinforced Secure Watchdog Timer"]
    RSWDT = 63,
    #[doc = "64 - Cache ECC Warning"]
    CCW = 64,
    #[doc = "65 - Cache ECC Fault"]
    CCF = 65,
    #[doc = "66 - GMAC Queue 1"]
    GMAC_Q1 = 66,
    #[doc = "67 - GMAC Queue 2"]
    GMAC_Q2 = 67,
    #[doc = "68 - Floating Point Unit IXC"]
    IXC = 68,
    #[doc = "69 - Inter-IC Sound controller 0"]
    I2SC0 = 69,
    #[doc = "70 - Inter-IC Sound controller 1"]
    I2SC1 = 70,
    #[doc = "71 - GMAC Queue 3"]
    GMAC_Q3 = 71,
    #[doc = "72 - GMAC Queue 4"]
    GMAC_Q4 = 72,
    #[doc = "73 - GMAC Queue 5"]
    GMAC_Q5 = 73,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "Analog Comparator Controller"]
pub type Acc = crate::Periph<acc::RegisterBlock, 0x4004_4000>;
impl core::fmt::Debug for Acc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Acc").finish()
    }
}
#[doc = "Analog Comparator Controller"]
pub mod acc;
#[doc = "Advanced Encryption Standard"]
pub type Aes = crate::Periph<aes::RegisterBlock, 0x4006_c000>;
impl core::fmt::Debug for Aes {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Aes").finish()
    }
}
#[doc = "Advanced Encryption Standard"]
pub mod aes;
#[doc = "Analog Front-End Controller"]
pub type Afec0 = crate::Periph<afec0::RegisterBlock, 0x4003_c000>;
impl core::fmt::Debug for Afec0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Afec0").finish()
    }
}
#[doc = "Analog Front-End Controller"]
pub mod afec0;
#[doc = "Analog Front-End Controller"]
pub type Afec1 = crate::Periph<afec0::RegisterBlock, 0x4006_4000>;
impl core::fmt::Debug for Afec1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Afec1").finish()
    }
}
#[doc = "Analog Front-End Controller"]
pub use self::afec0 as afec1;
#[doc = "Chip Identifier"]
pub type Chipid = crate::Periph<chipid::RegisterBlock, 0x400e_0940>;
impl core::fmt::Debug for Chipid {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Chipid").finish()
    }
}
#[doc = "Chip Identifier"]
pub mod chipid;
#[doc = "Digital-to-Analog Converter Controller"]
pub type Dacc = crate::Periph<dacc::RegisterBlock, 0x4004_0000>;
impl core::fmt::Debug for Dacc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dacc").finish()
    }
}
#[doc = "Digital-to-Analog Converter Controller"]
pub mod dacc;
#[doc = "Embedded Flash Controller"]
pub type Efc = crate::Periph<efc::RegisterBlock, 0x400e_0c00>;
impl core::fmt::Debug for Efc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Efc").finish()
    }
}
#[doc = "Embedded Flash Controller"]
pub mod efc;
#[doc = "Gigabit Ethernet MAC"]
pub type Gmac = crate::Periph<gmac::RegisterBlock, 0x4005_0000>;
impl core::fmt::Debug for Gmac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gmac").finish()
    }
}
#[doc = "Gigabit Ethernet MAC"]
pub mod gmac;
#[doc = "General Purpose Backup Registers"]
pub type Gpbr = crate::Periph<gpbr::RegisterBlock, 0x400e_1890>;
impl core::fmt::Debug for Gpbr {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpbr").finish()
    }
}
#[doc = "General Purpose Backup Registers"]
pub mod gpbr;
#[doc = "High Speed MultiMedia Card Interface"]
pub type Hsmci = crate::Periph<hsmci::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for Hsmci {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hsmci").finish()
    }
}
#[doc = "High Speed MultiMedia Card Interface"]
pub mod hsmci;
#[doc = "Inter-IC Sound Controller"]
pub type I2sc0 = crate::Periph<i2sc0::RegisterBlock, 0x4008_c000>;
impl core::fmt::Debug for I2sc0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2sc0").finish()
    }
}
#[doc = "Inter-IC Sound Controller"]
pub mod i2sc0;
#[doc = "Inter-IC Sound Controller"]
pub type I2sc1 = crate::Periph<i2sc0::RegisterBlock, 0x4009_0000>;
impl core::fmt::Debug for I2sc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2sc1").finish()
    }
}
#[doc = "Inter-IC Sound Controller"]
pub use self::i2sc0 as i2sc1;
#[doc = "Integrity Check Monitor"]
pub type Icm = crate::Periph<icm::RegisterBlock, 0x4004_8000>;
impl core::fmt::Debug for Icm {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Icm").finish()
    }
}
#[doc = "Integrity Check Monitor"]
pub mod icm;
#[doc = "Image Sensor Interface"]
pub type Isi = crate::Periph<isi::RegisterBlock, 0x4004_c000>;
impl core::fmt::Debug for Isi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Isi").finish()
    }
}
#[doc = "Image Sensor Interface"]
pub mod isi;
#[doc = "AHB Bus Matrix"]
pub type Matrix = crate::Periph<matrix::RegisterBlock, 0x4008_8000>;
impl core::fmt::Debug for Matrix {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Matrix").finish()
    }
}
#[doc = "AHB Bus Matrix"]
pub mod matrix;
#[doc = "Controller Area Network"]
pub type Mcan0 = crate::Periph<mcan0::RegisterBlock, 0x4003_0000>;
impl core::fmt::Debug for Mcan0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Mcan0").finish()
    }
}
#[doc = "Controller Area Network"]
pub mod mcan0;
#[doc = "Controller Area Network"]
pub type Mcan1 = crate::Periph<mcan0::RegisterBlock, 0x4003_4000>;
impl core::fmt::Debug for Mcan1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Mcan1").finish()
    }
}
#[doc = "Controller Area Network"]
pub use self::mcan0 as mcan1;
#[doc = "MediaLB"]
pub type Mlb = crate::Periph<mlb::RegisterBlock, 0x4006_8000>;
impl core::fmt::Debug for Mlb {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Mlb").finish()
    }
}
#[doc = "MediaLB"]
pub mod mlb;
#[doc = "Parallel Input/Output Controller"]
pub type Pioa = crate::Periph<pioa::RegisterBlock, 0x400e_0e00>;
impl core::fmt::Debug for Pioa {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pioa").finish()
    }
}
#[doc = "Parallel Input/Output Controller"]
pub mod pioa;
#[doc = "Parallel Input/Output Controller"]
pub type Piob = crate::Periph<pioa::RegisterBlock, 0x400e_1000>;
impl core::fmt::Debug for Piob {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Piob").finish()
    }
}
#[doc = "Parallel Input/Output Controller"]
pub use self::pioa as piob;
#[doc = "Parallel Input/Output Controller"]
pub type Pioc = crate::Periph<pioa::RegisterBlock, 0x400e_1200>;
impl core::fmt::Debug for Pioc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pioc").finish()
    }
}
#[doc = "Parallel Input/Output Controller"]
pub use self::pioa as pioc;
#[doc = "Parallel Input/Output Controller"]
pub type Piod = crate::Periph<pioa::RegisterBlock, 0x400e_1400>;
impl core::fmt::Debug for Piod {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Piod").finish()
    }
}
#[doc = "Parallel Input/Output Controller"]
pub use self::pioa as piod;
#[doc = "Parallel Input/Output Controller"]
pub type Pioe = crate::Periph<pioa::RegisterBlock, 0x400e_1600>;
impl core::fmt::Debug for Pioe {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pioe").finish()
    }
}
#[doc = "Parallel Input/Output Controller"]
pub use self::pioa as pioe;
#[doc = "Power Management Controller"]
pub type Pmc = crate::Periph<pmc::RegisterBlock, 0x400e_0600>;
impl core::fmt::Debug for Pmc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pmc").finish()
    }
}
#[doc = "Power Management Controller"]
pub mod pmc;
#[doc = "Pulse Width Modulation Controller"]
pub type Pwm0 = crate::Periph<pwm0::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for Pwm0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwm0").finish()
    }
}
#[doc = "Pulse Width Modulation Controller"]
pub mod pwm0;
#[doc = "Pulse Width Modulation Controller"]
pub type Pwm1 = crate::Periph<pwm0::RegisterBlock, 0x4005_c000>;
impl core::fmt::Debug for Pwm1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwm1").finish()
    }
}
#[doc = "Pulse Width Modulation Controller"]
pub use self::pwm0 as pwm1;
#[doc = "Quad Serial Peripheral Interface"]
pub type Qspi = crate::Periph<qspi::RegisterBlock, 0x4007_c000>;
impl core::fmt::Debug for Qspi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Qspi").finish()
    }
}
#[doc = "Quad Serial Peripheral Interface"]
pub mod qspi;
#[doc = "Reset Controller"]
pub type Rstc = crate::Periph<rstc::RegisterBlock, 0x400e_1800>;
impl core::fmt::Debug for Rstc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rstc").finish()
    }
}
#[doc = "Reset Controller"]
pub mod rstc;
#[doc = "Reinforced Safety Watchdog Timer"]
pub type Rswdt = crate::Periph<rswdt::RegisterBlock, 0x400e_1900>;
impl core::fmt::Debug for Rswdt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rswdt").finish()
    }
}
#[doc = "Reinforced Safety Watchdog Timer"]
pub mod rswdt;
#[doc = "Real-time Clock"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x400e_1860>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Real-time Clock"]
pub mod rtc;
#[doc = "Real-time Timer"]
pub type Rtt = crate::Periph<rtt::RegisterBlock, 0x400e_1830>;
impl core::fmt::Debug for Rtt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtt").finish()
    }
}
#[doc = "Real-time Timer"]
pub mod rtt;
#[doc = "SDRAM Controller"]
pub type Sdramc = crate::Periph<sdramc::RegisterBlock, 0x4008_4000>;
impl core::fmt::Debug for Sdramc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sdramc").finish()
    }
}
#[doc = "SDRAM Controller"]
pub mod sdramc;
#[doc = "Static Memory Controller"]
pub type Smc = crate::Periph<smc::RegisterBlock, 0x4008_0000>;
impl core::fmt::Debug for Smc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Smc").finish()
    }
}
#[doc = "Static Memory Controller"]
pub mod smc;
#[doc = "Serial Peripheral Interface"]
pub type Spi0 = crate::Periph<spi0::RegisterBlock, 0x4000_8000>;
impl core::fmt::Debug for Spi0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi0").finish()
    }
}
#[doc = "Serial Peripheral Interface"]
pub mod spi0;
#[doc = "Serial Peripheral Interface"]
pub type Spi1 = crate::Periph<spi0::RegisterBlock, 0x4005_8000>;
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
#[doc = "Serial Peripheral Interface"]
pub use self::spi0 as spi1;
#[doc = "Synchronous Serial Controller"]
pub type Ssc = crate::Periph<ssc::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for Ssc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ssc").finish()
    }
}
#[doc = "Synchronous Serial Controller"]
pub mod ssc;
#[doc = "Supply Controller"]
pub type Supc = crate::Periph<supc::RegisterBlock, 0x400e_1810>;
impl core::fmt::Debug for Supc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Supc").finish()
    }
}
#[doc = "Supply Controller"]
pub mod supc;
#[doc = "Timer Counter"]
pub type Tc0 = crate::Periph<tc0::RegisterBlock, 0x4000_c000>;
impl core::fmt::Debug for Tc0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc0").finish()
    }
}
#[doc = "Timer Counter"]
pub mod tc0;
#[doc = "Timer Counter"]
pub type Tc1 = crate::Periph<tc0::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for Tc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc1").finish()
    }
}
#[doc = "Timer Counter"]
pub use self::tc0 as tc1;
#[doc = "Timer Counter"]
pub type Tc2 = crate::Periph<tc0::RegisterBlock, 0x4001_4000>;
impl core::fmt::Debug for Tc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc2").finish()
    }
}
#[doc = "Timer Counter"]
pub use self::tc0 as tc2;
#[doc = "Timer Counter"]
pub type Tc3 = crate::Periph<tc0::RegisterBlock, 0x4005_4000>;
impl core::fmt::Debug for Tc3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tc3").finish()
    }
}
#[doc = "Timer Counter"]
pub use self::tc0 as tc3;
#[doc = "True Random Number Generator"]
pub type Trng = crate::Periph<trng::RegisterBlock, 0x4007_0000>;
impl core::fmt::Debug for Trng {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Trng").finish()
    }
}
#[doc = "True Random Number Generator"]
pub mod trng;
#[doc = "Two-wire Interface High Speed"]
pub type Twihs0 = crate::Periph<twihs0::RegisterBlock, 0x4001_8000>;
impl core::fmt::Debug for Twihs0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Twihs0").finish()
    }
}
#[doc = "Two-wire Interface High Speed"]
pub mod twihs0;
#[doc = "Two-wire Interface High Speed"]
pub type Twihs1 = crate::Periph<twihs0::RegisterBlock, 0x4001_c000>;
impl core::fmt::Debug for Twihs1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Twihs1").finish()
    }
}
#[doc = "Two-wire Interface High Speed"]
pub use self::twihs0 as twihs1;
#[doc = "Two-wire Interface High Speed"]
pub type Twihs2 = crate::Periph<twihs0::RegisterBlock, 0x4006_0000>;
impl core::fmt::Debug for Twihs2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Twihs2").finish()
    }
}
#[doc = "Two-wire Interface High Speed"]
pub use self::twihs0 as twihs2;
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub type Uart0 = crate::Periph<uart0::RegisterBlock, 0x400e_0800>;
impl core::fmt::Debug for Uart0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart0").finish()
    }
}
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub mod uart0;
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub type Uart1 = crate::Periph<uart0::RegisterBlock, 0x400e_0a00>;
impl core::fmt::Debug for Uart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart1").finish()
    }
}
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub use self::uart0 as uart1;
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub type Uart2 = crate::Periph<uart0::RegisterBlock, 0x400e_1a00>;
impl core::fmt::Debug for Uart2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart2").finish()
    }
}
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub use self::uart0 as uart2;
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub type Uart3 = crate::Periph<uart0::RegisterBlock, 0x400e_1c00>;
impl core::fmt::Debug for Uart3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart3").finish()
    }
}
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub use self::uart0 as uart3;
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub type Uart4 = crate::Periph<uart0::RegisterBlock, 0x400e_1e00>;
impl core::fmt::Debug for Uart4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart4").finish()
    }
}
#[doc = "Universal Asynchronous Receiver Transmitter"]
pub use self::uart0 as uart4;
#[doc = "Universal Synchronous Asynchronous Receiver Transmitter"]
pub type Usart0 = crate::Periph<usart0::RegisterBlock, 0x4002_4000>;
impl core::fmt::Debug for Usart0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart0").finish()
    }
}
#[doc = "Universal Synchronous Asynchronous Receiver Transmitter"]
pub mod usart0;
#[doc = "Universal Synchronous Asynchronous Receiver Transmitter"]
pub type Usart1 = crate::Periph<usart0::RegisterBlock, 0x4002_8000>;
impl core::fmt::Debug for Usart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart1").finish()
    }
}
#[doc = "Universal Synchronous Asynchronous Receiver Transmitter"]
pub use self::usart0 as usart1;
#[doc = "Universal Synchronous Asynchronous Receiver Transmitter"]
pub type Usart2 = crate::Periph<usart0::RegisterBlock, 0x4002_c000>;
impl core::fmt::Debug for Usart2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart2").finish()
    }
}
#[doc = "Universal Synchronous Asynchronous Receiver Transmitter"]
pub use self::usart0 as usart2;
#[doc = "USB High-Speed Interface"]
pub type Usbhs = crate::Periph<usbhs::RegisterBlock, 0x4003_8000>;
impl core::fmt::Debug for Usbhs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usbhs").finish()
    }
}
#[doc = "USB High-Speed Interface"]
pub mod usbhs;
#[doc = "USB Transmitter Interface Macrocell"]
pub type Utmi = crate::Periph<utmi::RegisterBlock, 0x400e_0400>;
impl core::fmt::Debug for Utmi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Utmi").finish()
    }
}
#[doc = "USB Transmitter Interface Macrocell"]
pub mod utmi;
#[doc = "Watchdog Timer"]
pub type Wdt = crate::Periph<wdt::RegisterBlock, 0x400e_1850>;
impl core::fmt::Debug for Wdt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdt").finish()
    }
}
#[doc = "Watchdog Timer"]
pub mod wdt;
#[doc = "Extensible DMA Controller"]
pub type Xdmac = crate::Periph<xdmac::RegisterBlock, 0x4007_8000>;
impl core::fmt::Debug for Xdmac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Xdmac").finish()
    }
}
#[doc = "Extensible DMA Controller"]
pub mod xdmac;
#[doc = "LOCKBIT"]
pub type Lockbit = crate::Periph<lockbit::RegisterBlock, 0>;
impl core::fmt::Debug for Lockbit {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lockbit").finish()
    }
}
#[doc = "LOCKBIT"]
pub mod lockbit;
#[doc = "System control not in SCB"]
pub type ScnScb = crate::Periph<scn_scb::RegisterBlock, 0xe000_e000>;
impl core::fmt::Debug for ScnScb {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ScnScb").finish()
    }
}
#[doc = "System control not in SCB"]
pub mod scn_scb;
#[doc = "System timer"]
pub type SysTick = crate::Periph<sys_tick::RegisterBlock, 0xe000_e010>;
impl core::fmt::Debug for SysTick {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SysTick").finish()
    }
}
#[doc = "System timer"]
pub mod sys_tick;
#[doc = "Core Debug Register"]
pub type CoreDebug = crate::Periph<core_debug::RegisterBlock, 0xe000_edf0>;
impl core::fmt::Debug for CoreDebug {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CoreDebug").finish()
    }
}
#[doc = "Core Debug Register"]
pub mod core_debug;
#[doc = "Embedded Trace Macrocell"]
pub type Etm = crate::Periph<etm::RegisterBlock, 0xe004_1000>;
impl core::fmt::Debug for Etm {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Etm").finish()
    }
}
#[doc = "Embedded Trace Macrocell"]
pub mod etm;
#[unsafe(no_mangle)]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "ACC"]
    pub acc: Acc,
    #[doc = "AES"]
    pub aes: Aes,
    #[doc = "AFEC0"]
    pub afec0: Afec0,
    #[doc = "AFEC1"]
    pub afec1: Afec1,
    #[doc = "CHIPID"]
    pub chipid: Chipid,
    #[doc = "DACC"]
    pub dacc: Dacc,
    #[doc = "EFC"]
    pub efc: Efc,
    #[doc = "GMAC"]
    pub gmac: Gmac,
    #[doc = "GPBR"]
    pub gpbr: Gpbr,
    #[doc = "HSMCI"]
    pub hsmci: Hsmci,
    #[doc = "I2SC0"]
    pub i2sc0: I2sc0,
    #[doc = "I2SC1"]
    pub i2sc1: I2sc1,
    #[doc = "ICM"]
    pub icm: Icm,
    #[doc = "ISI"]
    pub isi: Isi,
    #[doc = "MATRIX"]
    pub matrix: Matrix,
    #[doc = "MCAN0"]
    pub mcan0: Mcan0,
    #[doc = "MCAN1"]
    pub mcan1: Mcan1,
    #[doc = "MLB"]
    pub mlb: Mlb,
    #[doc = "PIOA"]
    pub pioa: Pioa,
    #[doc = "PIOB"]
    pub piob: Piob,
    #[doc = "PIOC"]
    pub pioc: Pioc,
    #[doc = "PIOD"]
    pub piod: Piod,
    #[doc = "PIOE"]
    pub pioe: Pioe,
    #[doc = "PMC"]
    pub pmc: Pmc,
    #[doc = "PWM0"]
    pub pwm0: Pwm0,
    #[doc = "PWM1"]
    pub pwm1: Pwm1,
    #[doc = "QSPI"]
    pub qspi: Qspi,
    #[doc = "RSTC"]
    pub rstc: Rstc,
    #[doc = "RSWDT"]
    pub rswdt: Rswdt,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "RTT"]
    pub rtt: Rtt,
    #[doc = "SDRAMC"]
    pub sdramc: Sdramc,
    #[doc = "SMC"]
    pub smc: Smc,
    #[doc = "SPI0"]
    pub spi0: Spi0,
    #[doc = "SPI1"]
    pub spi1: Spi1,
    #[doc = "SSC"]
    pub ssc: Ssc,
    #[doc = "SUPC"]
    pub supc: Supc,
    #[doc = "TC0"]
    pub tc0: Tc0,
    #[doc = "TC1"]
    pub tc1: Tc1,
    #[doc = "TC2"]
    pub tc2: Tc2,
    #[doc = "TC3"]
    pub tc3: Tc3,
    #[doc = "TRNG"]
    pub trng: Trng,
    #[doc = "TWIHS0"]
    pub twihs0: Twihs0,
    #[doc = "TWIHS1"]
    pub twihs1: Twihs1,
    #[doc = "TWIHS2"]
    pub twihs2: Twihs2,
    #[doc = "UART0"]
    pub uart0: Uart0,
    #[doc = "UART1"]
    pub uart1: Uart1,
    #[doc = "UART2"]
    pub uart2: Uart2,
    #[doc = "UART3"]
    pub uart3: Uart3,
    #[doc = "UART4"]
    pub uart4: Uart4,
    #[doc = "USART0"]
    pub usart0: Usart0,
    #[doc = "USART1"]
    pub usart1: Usart1,
    #[doc = "USART2"]
    pub usart2: Usart2,
    #[doc = "USBHS"]
    pub usbhs: Usbhs,
    #[doc = "UTMI"]
    pub utmi: Utmi,
    #[doc = "WDT"]
    pub wdt: Wdt,
    #[doc = "XDMAC"]
    pub xdmac: Xdmac,
    #[doc = "LOCKBIT"]
    pub lockbit: Lockbit,
    #[doc = "SCnSCB"]
    pub scn_scb: ScnScb,
    #[doc = "SysTick"]
    pub sys_tick: SysTick,
    #[doc = "CoreDebug"]
    pub core_debug: CoreDebug,
    #[doc = "ETM"]
    pub etm: Etm,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        unsafe {
            DEVICE_PERIPHERALS = true;
            Peripherals {
                acc: Acc::steal(),
                aes: Aes::steal(),
                afec0: Afec0::steal(),
                afec1: Afec1::steal(),
                chipid: Chipid::steal(),
                dacc: Dacc::steal(),
                efc: Efc::steal(),
                gmac: Gmac::steal(),
                gpbr: Gpbr::steal(),
                hsmci: Hsmci::steal(),
                i2sc0: I2sc0::steal(),
                i2sc1: I2sc1::steal(),
                icm: Icm::steal(),
                isi: Isi::steal(),
                matrix: Matrix::steal(),
                mcan0: Mcan0::steal(),
                mcan1: Mcan1::steal(),
                mlb: Mlb::steal(),
                pioa: Pioa::steal(),
                piob: Piob::steal(),
                pioc: Pioc::steal(),
                piod: Piod::steal(),
                pioe: Pioe::steal(),
                pmc: Pmc::steal(),
                pwm0: Pwm0::steal(),
                pwm1: Pwm1::steal(),
                qspi: Qspi::steal(),
                rstc: Rstc::steal(),
                rswdt: Rswdt::steal(),
                rtc: Rtc::steal(),
                rtt: Rtt::steal(),
                sdramc: Sdramc::steal(),
                smc: Smc::steal(),
                spi0: Spi0::steal(),
                spi1: Spi1::steal(),
                ssc: Ssc::steal(),
                supc: Supc::steal(),
                tc0: Tc0::steal(),
                tc1: Tc1::steal(),
                tc2: Tc2::steal(),
                tc3: Tc3::steal(),
                trng: Trng::steal(),
                twihs0: Twihs0::steal(),
                twihs1: Twihs1::steal(),
                twihs2: Twihs2::steal(),
                uart0: Uart0::steal(),
                uart1: Uart1::steal(),
                uart2: Uart2::steal(),
                uart3: Uart3::steal(),
                uart4: Uart4::steal(),
                usart0: Usart0::steal(),
                usart1: Usart1::steal(),
                usart2: Usart2::steal(),
                usbhs: Usbhs::steal(),
                utmi: Utmi::steal(),
                wdt: Wdt::steal(),
                xdmac: Xdmac::steal(),
                lockbit: Lockbit::steal(),
                scn_scb: ScnScb::steal(),
                sys_tick: SysTick::steal(),
                core_debug: CoreDebug::steal(),
                etm: Etm::steal(),
            }
        }
    }
}
